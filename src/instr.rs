use alloc::vec::Vec;

use crate::{
    types::{self, Index},
    validation::{Context, Validable},
};

#[derive(Clone, Copy)]
pub enum Instr {
    // Numeric
    I32Const(u32),
    I32Clz,
    I32Ctz,
    I32PopCnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivU,
    I32DivS,
    I32RemU,
    I32RemS,
    I32Not,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrU,
    I32ShrS,
    I32Rotl,
    I32Rotr,
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtU,
    I32LtS,
    I32GtU,
    I32GtS,
    I32LeU,
    I32LeS,
    I32GeU,
    I32GeS,

    I64Const(u64),
    I64Clz,
    I64Ctz,
    I64PopCnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivU,
    I64DivS,
    I64RemU,
    I64RemS,
    I64Not,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrU,
    I64ShrS,
    I64Rotl,
    I64Rotr,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtU,
    I64LtS,
    I64GtU,
    I64GtS,
    I64LeU,
    I64LeS,
    I64GeU,
    I64GeS,

    F32Const(f32),
    //    F32Abs,
    //    F32Neg,
    //    F32Sqrt,
    //    F32Ceil,
    //    F32Floor,
    //    F32Trunc,
    //    F32Nearest,
    //    F32Add,
    //    F32Sub,
    //    F32Mul,
    //    F32Div,
    //    F32Min,
    //    F32Max,
    //    F32Copysign,
    //    F32Eq,
    //    F32Ne,
    //    F32Lt,
    //    F32Gt,
    //    F32Le,
    F64Const(f64),
    //    F64Abs,
    //    F64Neg,
    //    F64Sqrt,
    //    F64Ceil,
    //    F64Floor,
    //    F64Trunc,
    //    F64Nearest,
    //    F64Eq,
    //    F64Ne,
    //    F64Lt,
    //    F64Gt,
    //    F64Le,
    //
    //    I32Extend8S,
    //    I64Extend8S,
    //    I32Extend16S,
    //    I64Extend16S,
    //    I64Extend32,
    //    I32WrapI64,
    //    I64ExtendI32U,
    //    I64ExtendI32S,
    //    I32TrunkI32U,
    //    I32TrunkI32S,
    //    I32TrunkI64U,
    //    I32TrunkI64S,
    //    I64TrunkI32U,
    //    I64TrunkI32S,
    //    I64TrunkI64U,
    //    I64TrunkI64S,
    //    I32TrunkSatI32U,
    //    I32TrunkSatI32S,
    //    I32TrunkSatI64U,
    //    I32TrunkSatI64S,
    //    I64TrunkSatI32U,
    //    I64TrunkSatI32S,
    //    I64TrunkSatI64U,
    //    I64TrunkSatI64S,
    //    F32DemoteF64,
    //    F64PromoteF32,
    //    F32ConvertI32U,
    //    F32ConvertI32S,
    //    F32ConvertI64U,
    //    F32ConvertI64S,
    //    F64ConvertI32U,
    //    F64ConvertI32S,
    //    F64ConvertI64U,
    //    F64ConvertI64S,
    //    I32ReinterpretF32,
    //    I64ReinterpretF32,
    //    F32ReinterpretI32,
    //    F64ReinterpretI64,

    // Vector
    // V128Const(i128),
    //    V128Not,
    //    V128And,
    //    V128AndNot,
    //    V128Or,
    //    V128Xor,
    //    V128Bitselect,
    //    V128AnyTrue,
    //    V128AllTrue,
    //    I8x16Suffle(Index),
    //    I8x16Swizzle,
    //    I8x16Splat,
    //    I16x8Splat,
    //    I32x4Splat,
    //    I64x2Splat,
    //    I8x16ExtractLaneU(Index),
    //    I8x16ExtractLaneS(Index),
    //    I16x8ExtractLaneU(Index),
    //    I16x8ExtractLaneS(Index),
    //    I32x4ExtractLaneU(Index),
    //    I32x4ExtractLaneS(Index),
    //    I64x2ExtractLaneU(Index),
    //    I64x2ExtractLaneS(Index),
    //    F32x4ExtractLane(Index),
    //    F64x2ExtractLane(Index),
    //    I8x16ReplaceLaneLane(Index),
    //    I16x8ReplaceLaneLane(Index),
    //    I32x4ReplaceLaneLane(Index),
    //    I64x2ReplaceLaneLane(Index),
    //    F32x4ReplaceLaneLane(Index),
    //    F64x2ReplaceLaneLane(Index),
    //    I8x16Eq,
    //    I8x16Ne,
    //    I8x16LtU,
    //    I8x16LtS,
    //    I8x16GtU,
    //    I8x16GtS,
    //    I8x16LeU,
    //    I8x16LeS,
    //    I8x16GeU,
    //    I8x16GeS,
    //    I16x8Eq,
    //    I16x8Ne,
    //    I16x8LtU,
    //    I16x8LtS,
    //    I16x8GtU,
    //    I16x8GtS,
    //    I16x8LeU,
    //    I16x8LeS,
    //    I16x8GeU,
    //    I16x8GeS,
    //    I32x4Eq,
    //    I32x4Ne,
    //    I32x4LtU,
    //    I32x4LtS,
    //    I32x4GtU,
    //    I32x4GtS,
    //    I32x4LeU,
    //    I32x4LeS,
    //    I32x4GeU,
    //    I32x4GeS,
    //    I64x2Eq,
    //    I64x2Ne,
    //    I64x2LtU,
    //    I64x2LtS,
    //    I64x2GtU,
    //    I64x2GtS,
    //    I64x2LeU,
    //    I64x2LeS,
    //    I64x2GeU,
    //    I64x2GeS,
    //    I8x16Popcnt,
    //    I16x8Q15mlrSatS,
    //    I32x4DotI16x8S,
    //    F32x4Abs,
    //    F32x4Neg,
    //    F32x4Sqrt,
    //    F32x4Ceil,
    //    F32x4Floor,
    //    F32x4Trunc,
    //    F32x4Nearest,
    //    F64x2Abs,
    //    F64x2Neg,
    //    F64x2Sqrt,
    //    F64x2Ceil,
    //    F64x2Floor,
    //    F64x2Trunc,
    //    F64x2Nearest,
    //    I8AllTrue,
    //    I16AllTrue,
    //    I32AllTrue,
    //    I63AllTrue,
    //    I8Bitmask,
    //    I16Bitmask,
    //    I32Bitmask,
    //    I63Bitmask,
    //    I8x16NarrowI16x8U,
    //    I8x16NarrowI16x8S,
    //    I16x8NarrowI32x4U,
    //    I16x8NarrowI32x4S,
    //    I16x8ExtendHalfI8x16U,
    //    I16x8ExtendHalfI8x16S,
    //    I32x4ExtendHalfI16x8U,
    //    I32x4ExtendHalfI16x8S,
    //    I64x2ExtendHalfI32x4U,
    //    I64x2ExtendHalfI32x4S,
    //    I8x16Shl,
    //    I16x8Shl,
    //    I32x4Shl,
    //    I64x8Shl,
    //    I8x16ShrU,
    //    I16x8ShrU,
    //    I32x4ShrU,
    //    I64x8ShrU,
    //    I8x16ShrS,
    //    I16x8ShrS,
    //    I32x4ShrS,
    //    I64x8ShrS,
    //    I8x16Add,
    //    I8x16Sub,
    //    I16x8Add,
    //    I16x8Sub,
    //    I32x4Add,
    //    I32x4Sub,
    //    I64x2Add,
    //    I64x2Sub,
    //    I8x16MinU,
    //    I8x16MinS,
    //    I8x16MaxU,
    //    I8x16MaxS,
    //    I16x8MinU,
    //    I16x8MinS,
    //    I16x8MaxU,
    //    I16x8MaxS,
    //    I32x4MinU,
    //    I32x4MinS,
    //    I32x4MaxU,
    //    I32x4MaxS,
    //    I16x8AddSatU,
    //    I16x8AddSatS,
    //    I16x8SubSatU,
    //    I16x8SubSatS,
    //    I8x16AddSatU,
    //    I8x16AddSatS,
    //    I8x16SubSatU,
    //    I8x16SubSatS,
    //    I16x8Mul,
    //    I32x4Mul,
    //    I62x2Mul,
    //    I8x16AvgrU,
    //    I16x8AvgrU,
    //    I16x8ExtmulHalfI8x16U,
    //    I16x8ExtmulHalfI8x16S,
    //    I32x4ExtmulHalfI16x8U,
    //    I32x4ExtmulHalfI16x8S,
    //    I64x2ExtmulHalfI32x4U,
    //    I64x2ExtmulHalfI32x4S,
    //    I16x8ExtaddPairwiseI8x16U,
    //    I16x8ExtaddPairwiseI8x16S,
    //    I32x4ExtaddPairwiseI16x8U,
    //    I32x4ExtaddPairwiseI16x8S,
    //    F32x4Add,
    //    F32x4Sub,
    //    F32x4Mul,
    //    F32x4Div,
    //    F32x4Min,
    //    F32x4Max,
    //    F32x4Pmin,
    //    F32x4Pmax,
    //    F64x2Add,
    //    F64x2Sub,
    //    F64x2Mul,
    //    F64x2Div,
    //    F64x2Min,
    //    F64x2Max,
    //    F64x2Pmin,
    //    F64x2Pmax,
    //    I32x4TrunkSatF32x4U,
    //    I32x4TrunkSatF32x4S,
    //    I32x4TrunkSatF64x2UZero,
    //    I32x4TrunkSatF64x2SZero,
    //    F32x4ConvertI32x4U,
    //    F32x4ConvertI32x4S,
    //    F32x4DemoteF64x2Zero,
    //    F64x2ConvertLowI32x4U,
    //    F64x2ConvertLowI32x4S,
    //    F64x2PromoteLowF32x4,

    ////Reference
    RefNull(types::Ref),
    //RefIsNull,
    RefFunc(Index),
    //// Param
    //ParamDrop,
    //ParamSelect(Option<types::Value>),

    // Var
    LocalGet(Index),
    LocalSet(Index),
    LocalTee(Index),
    GlobalGet(Index),
    GlobalSet(Index),

    // Table
    //TableGet(Index),
    //TableSet(Index),
    //TableSize(Index),
    //TableGrow(Index),
    //TableFill(Index),
    //TableCopy(Index, Index),
    //TableInit(Index, Index),
    //ElemDrop(Index),

    //// Memory
    //I8LoadOffset(u32),
    //I8LoadAlign(u32),
    //I16LoadOffset(u32),
    //I16LoadAlign(u32),
    //I32LoadOffset(u32),
    //I32LoadAlign(u32),
    //I64LoadOffset(u32),
    //I64LoadAlign(u32),

    //F32LoadOffset(u32),
    //F32LoadAlign(u32),
    //F64LoadOffset(u32),
    //F64LoadAlign(u32),

    //V128LoadOffset(u32),
    //V128LoadAlign(u32),

    //I8StoreOffset(u32),
    //I8StoreAlign(u32),
    //I16StoreOffset(u32),
    //I16StoreAlign(u32),
    //I32StoreOffset(u32),
    //I32StoreAlign(u32),
    //I64StoreOffset(u32),
    //I64StoreAlign(u32),

    //F32StoreOffset(u32),
    //F32StoreAlign(u32),
    //F64StoreOffset(u32),
    //F64StoreAlign(u32),

    //V128StoreOffset(u32),
    //V128StoreAlign(u32),

    //I8Load8UOffset(u32),
    //I8Load8UAlign(u32),
    //I8Load8SOffset(u32),
    //I8Load8SAlign(u32),
    //I16Load8UOffset(u32),
    //I16Load8UAlign(u32),
    //I16Load8SOffset(u32),
    //I16Load8SAlign(u32),
    //I32Load8UOffset(u32),
    //I32Load8UAlign(u32),
    //I32Load8SOffset(u32),
    //I32Load8SAlign(u32),
    //I64Load8UOffset(u32),
    //I64Load8UAlign(u32),
    //I64Load8SOffset(u32),
    //I64Load8SAlign(u32),

    //I8Load16UOffset(u32),
    //I8Load16UAlign(u32),
    //I8Load16SOffset(u32),
    //I8Load16SAlign(u32),
    //I16Load16UOffset(u32),
    //I16Load16UAlign(u32),
    //I16Load16SOffset(u32),
    //I16Load16SAlign(u32),
    //I32Load16UOffset(u32),
    //I32Load16UAlign(u32),
    //I32Load16SOffset(u32),
    //I32Load16SAlign(u32),
    //I64Load16UOffset(u32),
    //I64Load16UAlign(u32),
    //I64Load16SOffset(u32),
    //I64Load16SAlign(u32),

    //I64Load32UOffset(u32),
    //I64Load32UAlign(u32),
    //I64Load32SOffset(u32),
    //I64Load32SAlign(u32),

    //I8Store8Offset(u32),
    //I8Store8Align(u32),
    //I16Store8Offset(u32),
    //I16Store8Align(u32),
    //I32Store8Offset(u32),
    //I32Store8Align(u32),
    //I64Store8Offset(u32),
    //I64Store8Align(u32),

    //I8Store16Offset(u32),
    //I8Store16Align(u32),
    //I16Store16Offset(u32),
    //I16Store16Align(u32),
    //I32Store16Offset(u32),
    //I32Store16Align(u32),
    //I64Store16Offset(u32),
    //I64Store16Align(u32),

    //I64Store32Offset(u32),
    //I64Store32Align(u32),

    //V128Load8x8UOffset(u32),
    //V128Load8x8UAlign(u32),
    //V128Load8x8SOffset(u32),
    //V128Load8x8SAlign(u32),

    //V128Load16x4UOffset(u32),
    //V128Load16x4UAlign(u32),
    //V128Load16x4SOffset(u32),
    //V128Load16x4SAlign(u32),

    //V128Load32x2UOffset(u32),
    //V128Load32x2UAlign(u32),
    //V128Load32x2SOffset(u32),
    //V128Load32x2SAlign(u32),

    //V128Load32ZeroOffset(u32),
    //V128Load32ZeroAlign(u32),

    //V128Load64ZeroOffset(u32),
    //V128Load64ZeroAlign(u32),

    //V128Load8SplatOffset(u32),
    //V128Load8SplatAlign(u32),
    //V128Load16SplatOffset(u32),
    //V128Load16SplatAlign(u32),
    //V128Load32SplatOffset(u32),
    //V128Load32SplatAlign(u32),
    //V128Load64SplatOffset(u32),
    //V128Load64SplatAlign(u32),

    //V128Load8LaneOffset(u32, Index),
    //V128Load8LaneAlign(u32, Index),
    //V128Load16LaneOffset(u32, Index),
    //V128Load16LaneAlign(u32, Index),
    //V128Load32LaneOffset(u32, Index),
    //V128Load32LaneAlign(u32, Index),
    //V128Load64LaneOffset(u32, Index),
    //V128Load64LaneAlign(u32, Index),

    //V128store8LaneOffset(u32, Index),
    //V128store8LaneAlign(u32, Index),
    //V128store16LaneOffset(u32, Index),
    //V128store16LaneAlign(u32, Index),
    //V128store32LaneOffset(u32, Index),
    //V128store32LaneAlign(u32, Index),
    //V128store64LaneOffset(u32, Index),
    //V128store64LaneAlign(u32, Index),

    //MemorySize,
    //MemoryGrow,
    //MemoryFill,
    //MemoryCopy,
    //MemoryInit(Index),
    //DataDrop(Index),

    //// Control
    Nop,
    Unreachable,
    //BlockIdx(Index, Vec<Instr>),
    //BlockVal(Option<types::Value>, Vec<Instr>),
    //LoopIdx(Index, Vec<Instr>),
    //LoopVal(Option<types::Value>, Vec<Instr>),
    //IfIdx(Index, Vec<Instr>, Vec<Instr>),
    //IfVal(Option<types::Value>, Vec<Instr>, Vec<Instr>),
    //Br(Index),
    //BrIf(Index),
    //BrTable(Vec<Index>, Index),
    Return,
    Call(Index),
    //CallIndirect(Index, Index),
    // Administrative
    //Trap,
    //Ref(Addr),
    //RefExtern(Addr),
    //Invoke(Addr),
    //Label(Vec<Instr>),
    //Frame(Frame, Vec<Instr>),
}

impl Instr {
    pub fn is_constant(&self, context: &Context) -> bool {
        match self {
            Instr::I32Const(_)
            | Instr::I64Const(_)
            | Instr::F32Const(_)
            | Instr::F64Const(_)
            //| Instr::V128Const(_)
            | Instr::RefNull(_)
            | Instr::RefFunc(_) => true,
            Instr::GlobalGet(val) => {
                unimplemented!()
            }
            _ => false,
        }
    }
}

pub type Expr = Vec<Instr>;

// Validation

impl Validable for Expr {
    fn is_valid(&self, context: &Context, k: Option<u32>) -> bool {
        todo!()
    }
}
